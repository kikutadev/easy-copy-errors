The following text is a code file. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the file ends when the symbols --END-- are encountered.
----
src/extension.ts
import * as vscode from 'vscode';
import {
  copyAllDiagnosticsHandler,
  copyErrorsOnlyHandler,
  copyGroupedDiagnosticsHandler,
  copyGroupedErrorsOnlyHandler,
} from './commands/errorCommands';
import { copyVitestResultsHandler } from './commands/terminalCommands';

export function activate(context: vscode.ExtensionContext) {
  console.log('Extension "easy-copy-errors" is now active');

  // Register commands
  const allDiagnosticsCommand = vscode.commands.registerCommand(
    'easy-copy-errors.copyErrors',
    copyAllDiagnosticsHandler
  );

  const errorsOnlyCommand = vscode.commands.registerCommand(
    'easy-copy-errors.copyErrorsOnly',
    copyErrorsOnlyHandler
  );
  const groupedDiagnosticsCommand = vscode.commands.registerCommand(
    'easy-copy-errors.copyGroupedErrors',
    copyGroupedDiagnosticsHandler
  );

  const groupedErrorsOnlyCommand = vscode.commands.registerCommand(
    'easy-copy-errors.copyGroupedErrorsOnly',
    copyGroupedErrorsOnlyHandler
  );
  // 新しいVitestテスト結果コピーコマンドを登録
  const vitestResultsCommand = vscode.commands.registerCommand(
    'easy-copy-errors.copyVitestResults',
    copyVitestResultsHandler
  );

  context.subscriptions.push(
    allDiagnosticsCommand,
    errorsOnlyCommand,
    groupedDiagnosticsCommand,
    groupedErrorsOnlyCommand,
    vitestResultsCommand
  );
}

export function deactivate() {}

----
src/test/extension.test.ts
import * as assert from 'assert';

// You can import and use all API from the 'vscode' module
// as well as import your extension to test it
import * as vscode from 'vscode';
// import * as myExtension from '../../extension';

suite('Extension Test Suite', () => {
	vscode.window.showInformationMessage('Start all tests.');

	test('Sample test', () => {
		assert.strictEqual(-1, [1, 2, 3].indexOf(5));
		assert.strictEqual(-1, [1, 2, 3].indexOf(0));
	});
});

----
src/utils/file.ts
// src/utils/file.ts
import * as vscode from 'vscode';
import * as path from 'path';

/**
 * 指定されたURIから、ワークスペースルートからの相対パスを取得
 */
export function getRelativePath(uri: vscode.Uri): string {
  const workspaceFolder = vscode.workspace.getWorkspaceFolder(uri);
  if (workspaceFolder) {
    return path.relative(workspaceFolder.uri.fsPath, uri.fsPath);
  }
  return uri.fsPath;
}

/**
 * 指定されたURIからファイル名のみを取得
 */
export function getFileName(uri: vscode.Uri): string {
  return path.basename(uri.fsPath);
}

----
src/utils/config.ts
// src/utils/config.ts
import * as vscode from 'vscode';

/**
 * 拡張機能の設定を取得
 */
export function getConfiguration() {
  return vscode.workspace.getConfiguration('easyCopyErrors');
}

/**
 * 新しいフォーマットを使用するかどうかを取得
 */
export function useNewFormat(): boolean {
  return getConfiguration().get<boolean>('useNewFormat') ?? true;
}

/**
 * カスタムフォーマット文字列を取得
 */
export function getCustomFormat(): string {
  return (
    getConfiguration().get<string>('format') ||
    '[${severity}] Line ${line}, Column ${column}: ${message}'
  );
}

/**
 * ファイル名を含めるかどうかを取得
 */
export function includeFileName(): boolean {
  return getConfiguration().get<boolean>('includeFileName') ?? true;
}

/**
 * エラーをグループ化するかどうかを取得
 */
export function useGrouping(): boolean {
  return getConfiguration().get<boolean>('useGrouping') ?? false;
}

----
src/commands/terminalCommands.ts
// src/commands/vitestCommands.ts
import * as vscode from 'vscode';
import { captureTerminalText } from '../services/terminalCaptureService';
import {
  parseVitestOutput,
  formatFailedTests,
} from '../services/vitestParserService';
import { copyToClipboard } from '../services/clipboardService';

/**
 * Vitestテスト結果をコピーするコマンドハンドラー
 */
export async function copyVitestResultsHandler(): Promise<void> {
  vscode.window.showInformationMessage(
    'Vitestテスト結果をキャプチャしています...'
  );

  const terminalText = await captureTerminalText();

  if (!terminalText) {
    vscode.window.showErrorMessage(
      'ターミナルテキストのキャプチャに失敗しました'
    );
    return;
  }

  const failedTests = parseVitestOutput(terminalText);

  if (failedTests.length === 0) {
    vscode.window.showInformationMessage(
      '失敗したテストが見つかりませんでした'
    );
    return;
  }

  const formattedText = formatFailedTests(failedTests);
  const success = await copyToClipboard(formattedText);

  if (success) {
    vscode.window.showInformationMessage(
      `${failedTests.length}件の失敗したテストをコピーしました`
    );
  } else {
    vscode.window.showErrorMessage('テスト結果のコピーに失敗しました');
  }
}

----
src/commands/errorCommands.ts
// src/commands/errorCommands.ts
import * as vscode from 'vscode';
import {
  getCurrentFileDiagnostics,
  filterDiagnostics,
  buildDiagnosticContext,
  groupDiagnostics,
} from '../services/diagnosticsService';
import {
  formatDiagnostics,
  formatDiagnosticGroups,
} from '../services/formatterService';
import {
  copyToClipboard,
  showCopySuccessMessage,
  showNoDiagnosticsMessage,
  showNoEditorMessage,
} from '../services/clipboardService';
import { useGrouping } from '../utils/config';

/**
 * すべての診断情報をコピーするコマンドハンドラー
 */
export async function copyAllDiagnosticsHandler(): Promise<void> {
  await copyDiagnosticsWithOptions({ errorsOnly: false });
}

/**
 * エラーのみをコピーするコマンドハンドラー
 */
export async function copyErrorsOnlyHandler(): Promise<void> {
  await copyDiagnosticsWithOptions({ errorsOnly: true });
}

/**
 * グループ化したすべての診断情報をコピーするコマンドハンドラー
 */
export async function copyGroupedDiagnosticsHandler(): Promise<void> {
  await copyDiagnosticsWithOptions({ errorsOnly: false, forceGrouped: true });
}

/**
 * グループ化したエラーのみをコピーするコマンドハンドラー
 */
export async function copyGroupedErrorsOnlyHandler(): Promise<void> {
  await copyDiagnosticsWithOptions({ errorsOnly: true, forceGrouped: true });
}

/**
 * オプションを指定して診断情報をコピー
 */
async function copyDiagnosticsWithOptions(options: {
  errorsOnly: boolean;
  forceGrouped?: boolean;
}): Promise<void> {
  // 設定からグループ化の設定を取得（または強制的にグループ化）
  const grouped = options.forceGrouped || useGrouping();

  // 現在のファイルの診断情報を取得
  const diagnostics = getCurrentFileDiagnostics();

  if (!diagnostics) {
    showNoEditorMessage();
    return;
  }

  // 診断情報をフィルタリング
  const filteredDiagnostics = filterDiagnostics(diagnostics, options);

  if (filteredDiagnostics.length === 0) {
    showNoDiagnosticsMessage(options.errorsOnly);
    return;
  }

  const editor = vscode.window.activeTextEditor!;
  let formattedText: string;

  // グループ化するかどうかで処理を分岐
  if (grouped) {
    // 診断情報をグループ化
    const groups = groupDiagnostics(filteredDiagnostics, editor.document);
    formattedText = formatDiagnosticGroups(groups);
  } else {
    // 通常のフォーマット
    formattedText = formatDiagnostics(
      filteredDiagnostics,
      editor.document,
      buildDiagnosticContext
    );
  }

  // クリップボードにコピー
  const success = await copyToClipboard(formattedText);

  if (success) {
    showCopySuccessMessage(options.errorsOnly, grouped);
  }
}

----
src/services/formatterService.ts
// src/services/formatterService.ts
import * as vscode from 'vscode';
import { getFileName, getRelativePath } from '../utils/file';
import {
  useNewFormat,
  getCustomFormat,
  includeFileName,
} from '../utils/config';
import { DiagnosticContext, DiagnosticGroup } from './diagnosticsService';

/**
 * 診断情報をフォーマット
 */
export function formatDiagnostic(context: DiagnosticContext): string {
  if (useNewFormat()) {
    return formatNewStyle(context);
  } else {
    return formatCustomStyle(context);
  }
}

/**
 * 新しいスタイルでフォーマット（AIプロンプト向け）
 */
function formatNewStyle(context: DiagnosticContext): string {
  const { document, line, lineContent, message } = context;
  const relativePath = getRelativePath(document.uri);

  return `file: ${relativePath}\nLine ${line}:      ${lineContent}\n${message}`;
}

/**
 * カスタムスタイルでフォーマット（ユーザー設定に基づく）
 */
function formatCustomStyle(context: DiagnosticContext): string {
  const { document, line, column, lineContent, severity, message } = context;
  const fileName = getFileName(document.uri);
  const relativePath = getRelativePath(document.uri);

  let format = getCustomFormat();

  let formatted = format
    .replace(/\${severity}/g, severity)
    .replace(/\${line}/g, line.toString())
    .replace(/\${column}/g, column.toString())
    .replace(/\${message}/g, message)
    .replace(/\${lineContent}/g, lineContent);

  if (includeFileName()) {
    formatted = formatted
      .replace(/\${file}/g, fileName)
      .replace(/\${relativePath}/g, relativePath);
  }

  return formatted;
}

/**
 * 複数の診断情報をフォーマットして結合
 */
export function formatDiagnostics(
  diagnostics: vscode.Diagnostic[],
  document: vscode.TextDocument,
  buildContext: (
    diag: vscode.Diagnostic,
    doc: vscode.TextDocument
  ) => DiagnosticContext
): string {
  return diagnostics
    .map((diag) => formatDiagnostic(buildContext(diag, document)))
    .join('\n\n');
}

/**
 * グループ化された診断情報をフォーマット
 */
export function formatDiagnosticGroups(groups: DiagnosticGroup[]): string {
  return groups
    .map((group) => formatDiagnosticGroup(group))
    .join('\n\n---\n\n');
}

/**
 * 単一の診断情報グループをフォーマット（シンプルなスタイル）
 * 同じファイル内で同じエラーメッセージのものをまとめる
 */
function formatDiagnosticGroup(group: DiagnosticGroup): string {
  const { contexts, message } = group;

  if (contexts.length === 0) {
    return '';
  }

  // 最初のコンテキストからファイル情報を取得
  const firstContext = contexts[0];
  const relativePath = getRelativePath(firstContext.document.uri);

  // ファイル情報を出力
  let result = `file: ${relativePath}\n`;

  // 各行の情報をフォーマット
  contexts.forEach((context) => {
    result += `Line ${context.line}: ${context.lineContent}\n`;
  });

  // エラーメッセージを最後に追加
  result += `${message}`;

  return result;
}

----
src/services/vitestParserService.ts
// src/services/vitestParserService.ts
/**
 * 失敗したVitestテストの情報
 */
export interface FailedTest {
  filePath: string;
  testName: string;
  errorMessage: string;
  codeSnippet: string;
  expected: string;
  received: string;
}

/**
 * Vitestのテスト出力から失敗したテストを抽出する
 */
export function parseVitestOutput(text: string): FailedTest[] {
  const failedTests: FailedTest[] = [];

  // テストファイルのセクションを検出
  const testSections = text.split(/❯\s+[^\s]+\s+\(\d+\s+tests/g);

  for (let i = 1; i < testSections.length; i++) {
    const section = testSections[i];
    const filePathMatch = text.match(
      new RegExp(
        `❯\\s+([^\\s]+)\\s+\\(\\d+\\s+tests.*?${section
          .substring(0, 30)
          .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}`,
        's'
      )
    );

    if (!filePathMatch) {
      continue;
    }
    const filePath = filePathMatch[1];

    // 失敗したテスト行を検出
    const failedTestPattern =
      /×\s+(.+?)\s+\d+ms\n\s+→\s+(.+?)(?=\n\s+[×✓]|\n\s*$)/gs;
    let testMatch;

    while ((testMatch = failedTestPattern.exec(section)) !== null) {
      const testName = testMatch[1].trim();
      const errorMessage = testMatch[2].trim();

      // テストの詳細テキストを抽出
      const startIdx = testMatch.index + testMatch[0].length;
      const nextTestMatch = failedTestPattern.exec(section);
      failedTestPattern.lastIndex = testMatch.index + 1; // 検索位置をリセット

      const endIdx = nextTestMatch ? nextTestMatch.index : section.length;
      const detailText = section.substring(startIdx, endIdx);

      // 期待値と実際の値を抽出
      const expected = extractExpected(detailText);
      const received = extractReceived(detailText);
      const codeSnippet = extractCodeSnippet(detailText);

      failedTests.push({
        filePath,
        testName,
        errorMessage,
        codeSnippet,
        expected,
        received,
      });
    }
  }

  return failedTests;
}

/**
 * 期待値を抽出
 */
function extractExpected(text: string): string {
  const match = text.match(
    /Expected:[\s\S]*?(?=\n\s*Received:|\n\s*Number of calls:|\n\s*$)/
  );
  return match ? match[0].trim() : '';
}

/**
 * 実際の値を抽出
 */
function extractReceived(text: string): string {
  const match = text.match(/Received:[\s\S]*?(?=\n\s*Number of calls:|\n\s*$)/);
  return match ? match[0].trim() : '';
}

/**
 * コードスニペットを抽出
 */
function extractCodeSnippet(text: string): string {
  const match = text.match(/(\[\n|\s+\[\n)[\s\S]*?(\]\n|\s+\]\n)/);
  return match ? match[0].trim() : '';
}

/**
 * 失敗したテスト情報をフォーマットする
 */
export function formatFailedTests(failedTests: FailedTest[]): string {
  return failedTests
    .map((test) => {
      let result = `file: ${test.filePath}\ntest: ${test.testName}\nerror: ${test.errorMessage}`;

      if (test.codeSnippet) {
        result += `\n\ncode:\n${test.codeSnippet}`;
      }

      if (test.expected) {
        result += `\n\nexpected:\n${test.expected}`;
      }

      if (test.received) {
        result += `\n\nreceived:\n${test.received}`;
      }

      return result;
    })
    .join('\n\n---\n\n');
}

----
src/services/diagnosticsService.ts
// src/services/diagnosticsService.ts
import * as vscode from 'vscode';

/**
 * 診断情報の重要度を文字列に変換
 */
export function getSeverityString(severity: vscode.DiagnosticSeverity): string {
  switch (severity) {
    case vscode.DiagnosticSeverity.Error:
      return 'Error';
    case vscode.DiagnosticSeverity.Warning:
      return 'Warning';
    case vscode.DiagnosticSeverity.Information:
      return 'Info';
    case vscode.DiagnosticSeverity.Hint:
      return 'Hint';
    default:
      return 'Unknown';
  }
}

/**
 * 現在のファイルの診断情報を取得
 */
export function getCurrentFileDiagnostics(): vscode.Diagnostic[] | null {
  const editor = vscode.window.activeTextEditor;
  if (!editor) {
    return null;
  }

  return vscode.languages.getDiagnostics(editor.document.uri);
}

/**
 * 診断情報をフィルタリング
 */
export function filterDiagnostics(
  diagnostics: vscode.Diagnostic[],
  filterOptions: {
    errorsOnly?: boolean;
  } = {}
): vscode.Diagnostic[] {
  const { errorsOnly = false } = filterOptions;

  if (errorsOnly) {
    return diagnostics.filter(
      (d) => d.severity === vscode.DiagnosticSeverity.Error
    );
  }

  return diagnostics;
}

/**
 * 診断情報のコンテキスト情報を構築
 */
export function buildDiagnosticContext(
  diagnostic: vscode.Diagnostic,
  document: vscode.TextDocument
): DiagnosticContext {
  return {
    diagnostic,
    document,
    line: diagnostic.range.start.line + 1,
    column: diagnostic.range.start.character + 1,
    lineContent: document.lineAt(diagnostic.range.start.line).text,
    severity: getSeverityString(diagnostic.severity),
    message: diagnostic.message,
  };
}

/**
 * 診断情報のコンテキスト
 */
export interface DiagnosticContext {
  diagnostic: vscode.Diagnostic;
  document: vscode.TextDocument;
  line: number;
  column: number;
  lineContent: string;
  severity: string;
  message: string;
}

/**
 * 診断情報のグループ
 * 同じファイル内で同じエラーメッセージを持つものをグループ化
 */
export interface DiagnosticGroup {
  // グループ内のコンテキスト一覧
  contexts: DiagnosticContext[];
  // 共通のファイルパス
  filePath: string;
  // 共通のエラーメッセージ
  message: string;
  // グループに固有のID
  id: string;
}

/**
 * 診断情報をグループ化する
 * 同じファイル内の同じエラーメッセージのものをまとめる
 */
export function groupDiagnostics(
  diagnostics: vscode.Diagnostic[],
  document: vscode.TextDocument
): DiagnosticGroup[] {
  // ファイル+メッセージの組み合わせでグループ化
  const groups: { [key: string]: DiagnosticGroup } = {};

  // 各診断情報を処理
  diagnostics.forEach((diagnostic) => {
    const context = buildDiagnosticContext(diagnostic, document);
    const message = diagnostic.message;
    const filePath = document.fileName;

    // グループのキーを作成（ファイルパス+メッセージ）
    const groupKey = `${filePath}:${message}`;

    if (!groups[groupKey]) {
      groups[groupKey] = {
        contexts: [],
        filePath,
        message,
        id: groupKey,
      };
    }

    groups[groupKey].contexts.push(context);
  });

  // 結果を配列に変換してソート
  return (
    Object.values(groups)
      // 行番号でソート
      .map((group) => {
        group.contexts.sort((a, b) => a.line - b.line);
        return group;
      })
      // グループをファイルパスでソート
      .sort((a, b) => a.filePath.localeCompare(b.filePath))
  );
}

----
src/services/terminalCaptureService.ts
import * as vscode from 'vscode';

/**
 * ターミナルの出力テキストをキャプチャする
 * @returns キャプチャしたテキスト、または失敗した場合はnull
 */
export async function captureTerminalText(): Promise<string | null> {
  // 元のクリップボード内容を保存
  const originalClipboard = await vscode.env.clipboard.readText();

  try {
    // アクティブなターミナルが存在するか確認
    if (!vscode.window.activeTerminal) {
      vscode.window.showWarningMessage(
        'アクティブなターミナルが見つかりません'
      );
      return null;
    }

    // ターミナルのテキストをすべて選択
    await vscode.commands.executeCommand('workbench.action.terminal.selectAll');
    // 選択したテキストをコピー
    await vscode.commands.executeCommand(
      'workbench.action.terminal.copySelection'
    );
    // 選択を解除
    await vscode.commands.executeCommand(
      'workbench.action.terminal.clearSelection'
    );

    // クリップボードからテキストを取得
    const terminalText = await vscode.env.clipboard.readText();

    // 元のクリップボード内容を復元
    await vscode.env.clipboard.writeText(originalClipboard);

    return terminalText;
  } catch (error) {
    console.error('ターミナルテキストのキャプチャに失敗:', error);
    // 元のクリップボード内容を復元
    await vscode.env.clipboard.writeText(originalClipboard);
    return null;
  }
}

----
src/services/clipboardService.ts
// src/services/clipboardService.ts
import * as vscode from 'vscode';

/**
 * テキストをクリップボードにコピー
 */
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    await vscode.env.clipboard.writeText(text);
    return true;
  } catch (error) {
    console.error('クリップボードへのコピーに失敗しました:', error);
    return false;
  }
}

/**
 * クリップボードへのコピー成功時のメッセージを表示
 */
export function showCopySuccessMessage(
  isErrorsOnly: boolean = false,
  isGrouped: boolean = false
): void {
  let message = isErrorsOnly ? 'エラーのみ' : 'すべての診断情報';

  if (isGrouped) {
    message += '（グループ化）';
  }

  message += 'をクリップボードにコピーしました！';

  vscode.window.showInformationMessage(message);
}

/**
 * 診断情報がない場合のメッセージを表示
 */
export function showNoDiagnosticsMessage(isErrorsOnly: boolean = false): void {
  const message = isErrorsOnly
    ? '現在のファイルにエラーがありません。'
    : '現在のファイルに診断情報がありません。';

  vscode.window.showInformationMessage(message);
}

/**
 * アクティブなエディタがない場合のメッセージを表示
 */
export function showNoEditorMessage(): void {
  vscode.window.showInformationMessage(
    'アクティブなエディタが見つかりません。'
  );
}

--END--